/*
* Copyright (c) 2018 ZeroPass
* Distributed under the MIT software license, see the accompanying
* file LICENSE or https://opensource.org/licenses/MIT.
*/

package io.zeropass.trid.passport;


import java.io.IOException;
import java.security.InvalidParameterException;
import java.util.logging.Logger;

import io.zeropass.trid.crypto.PassportSessionCipher;
import io.zeropass.trid.crypto.PassportSessionKey;
import io.zeropass.trid.passport.lds.LDSFile;
import io.zeropass.trid.smartcard.ISO7816;
import io.zeropass.trid.Utils;
import io.zeropass.trid.com.ApduResult;
import io.zeropass.trid.com.ComProvider;
import io.zeropass.trid.smartcard.SmartCard;
import io.zeropass.trid.smartcard.SmartCardError;
import io.zeropass.trid.tlv.TLVUtils;

public class PassportApdu extends SmartCard{
    private static final Logger Journal = Logger.getLogger("io.trid.passport.apdu");
    private static int DEFAULT_READ_LEN = 8;


    public PassportApdu(ComProvider provider) throws IOException, PassportError {
        super(provider);
    }

    protected void setSessionKey(PassportSessionKey key) {
        setSession(new PassportSessionCipher(key));
    }

    /* Selects eMRTD Application
    * see ICAO 9303-10 */
    public boolean selectEMRTD() throws IOException {
        ApduResult res = select(0x04, 0x0c, LDSFile.EMRTD_AID);
        return res.statusCode() == ISO7816.SW_NO_ERROR;
    }


    public void selectFile(short fileId) throws IOException, SmartCardError {
        byte[] fiddle = { (byte) ((fileId >> 8) & 0xFF), (byte) (fileId & 0xFF) };
        ApduResult rapdu = select(0x02, 0x0c, fiddle);

        if( rapdu == null ) {
            Journal.warning("selectFile failed!");
            return;
        }

        checkFileOperationResult(rapdu);
    }

    public byte[] readFile(short fileId) throws IOException, SmartCardError {
        selectFile(fileId);

        int le = DEFAULT_READ_LEN;
        ApduResult result = readBinary(0, le);
        if (result == null) {
            Journal.warning("Failed to read file, FID=" + fileId);
            return null;
        }

        checkFileOperationResult(result);
        le = TLVUtils.getRawDataLengthFromFragment(result.data()) - le;

        byte[] frag = result.data();
        result = readBinary(DEFAULT_READ_LEN, le);
        if (result == null) {
            Journal.warning("Failed to read file, FID=" + fileId);
            return null;
        }

        checkFileOperationResult(result);
        return Utils.join(frag, result.data());
    }


    public byte[] readFileBySFI(byte sfi) throws IOException, SmartCardError {
        if((sfi >> 7 & 0x1) != 1) {
            throw new InvalidParameterException("readFileBySFI: Invalid SFI!");
        }

        int le = DEFAULT_READ_LEN;
        ApduResult result = readBinary(0, le);
        if (result == null) {
            Journal.warning("Failed to read file, SFI=" + sfi);
            return null;
        }

        checkFileOperationResult(result);
        le = TLVUtils.getRawDataLengthFromFragment(result.data()) - le;

        byte[] frag = result.data();
        result = readBinary(DEFAULT_READ_LEN, le);
        if (result == null) {
            Journal.warning("Failed to read file, SFI=" + sfi);
            return null;
        }

        checkFileOperationResult(result);
        return Utils.join(frag, result.data());
    }


    /**
     * Request random challenge from IC needed of BAC
     * */
    protected byte[] getChallenge() throws IOException {
        ApduResult result = super.getChallenge(8);

        if(result.statusCode() != ISO7816.SW_NO_ERROR) {
            Journal.warning("getChallenge: IC returned status code: " + result.statusCode());
            return null;
        }

        return result.data();
    }


    /** Returns signature generated by ICC
     * @ param data. Length of data must be equal to 8 bytes
     */
    public byte[] internalAuthenticate(byte[] data) throws IOException, InvalidParameterException {
        if(data.length != 8) {
            throw new InvalidParameterException("signData: data len must be equal to 8 bytes!");
        }

        Utils.printDebug(Journal.getName(), "Sending data to be signed by ICU: " + Utils.hexToStr(data));

        ApduResult res = internalAuthenticate(data, 256);
        if(res.statusCode() != ISO7816.SW_NO_ERROR) {
            Journal.severe("internalAuthenticate failed: IC returned an error sw=" + res.statusCode());
            return null;
        }

        return res.data();
    }

    /*
    *  Sends EXTERNAL AUTHENTICATE command to ICC
    *
    *  @param ApduEAData
    *  @returns response ApduEAData from ICC
    */
    protected ApduEAData externalAuthenticate(ApduEAData data) throws IOException {
        Utils.printDebug(Journal.getName(), String.format("externalAuthenticate: sending data to ICC:\nE.IFD=%s\nM.IFD=%s", Utils.hexToStr(data.E), Utils.hexToStr(data.M)));

        ApduResult result = externalAuthenticate(data.toBytes(), 0x28);

        if(result.statusCode() != ISO7816.SW_NO_ERROR) {
            Journal.warning("externalAuthenticate, ICC returned status code: " + result.statusCode());
            return null;
        }

        try {
            return new ApduEAData(result.data());
        } catch (InvalidParameterException e) {
            Journal.warning("externalAuthenticate error: an exception was thrown e= " + e.getMessage());
            return null;
        }
    }

    private static void checkFileOperationResult(ApduResult result) throws SmartCardError {
        short sw = result.statusCode();
        switch (sw) {
            case ISO7816.SW_NO_ERROR:
                return;
            case ISO7816.SW_FILE_NOT_FOUND:
                throw new SmartCardError("File not found!", sw);
            case ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED:
            case ISO7816.SW_CONDITIONS_NOT_SATISFIED:
            case ISO7816.SW_COMMAND_NOT_ALLOWED:
                throw new SmartCardError("Access to file denied", sw);
        }
        throw new SmartCardError("Error occurred", sw);
    }
}
